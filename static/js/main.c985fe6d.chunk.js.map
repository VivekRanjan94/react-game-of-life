{"version":3,"sources":["components/Element.js","components/Board.js","components/App.js","index.js"],"names":["Element","alive","rowIndex","colIndex","setBoard","board","toggle","newBoard","className","onClick","onMouseOver","e","buttons","Board","map","row","element","INITIAL_BOARD","i","push","j","App","useState","int","setInt","speed","setSpeed","speedRef","useRef","handleStartStop","clearInterval","setInterval","updateBoard","useEffect","count","forEach","htmlFor","type","value","min","max","onChange","current","ref","prevBoard","rowIdx","colIdx","aliveNeighbours","n","newI","newJ","exists","checkNeighbours","ReactDOM","render","StrictMode","document","querySelector"],"mappings":"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","file":"static/js/main.c985fe6d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Element({\r\n  alive,\r\n  rowIndex,\r\n  colIndex,\r\n  setBoard,\r\n  board,\r\n}) {\r\n  function toggle() {\r\n    const newBoard = [...board]\r\n    newBoard[rowIndex][colIndex].alive = !board[rowIndex][colIndex].alive\r\n    setBoard(newBoard)\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={`element ${alive ? 'alive' : ''}`}\r\n      onClick={() => toggle()}\r\n      onMouseOver={(e) => {\r\n        if (e.buttons === 1) {\r\n          toggle()\r\n        }\r\n      }}\r\n    ></div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport Element from './Element'\r\n\r\nexport default function Board({ board, setBoard }) {\r\n  return (\r\n    <div className='board'>\r\n      {board.map((row, rowIndex) => {\r\n        return row.map((element, colIndex) => {\r\n          return (\r\n            <Element\r\n              key={rowIndex + colIndex}\r\n              alive={element.alive}\r\n              rowIndex={rowIndex}\r\n              colIndex={colIndex}\r\n              board={board}\r\n              setBoard={setBoard}\r\n            />\r\n          )\r\n        })\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n","import { useState, useEffect, useRef } from 'react'\r\nimport Board from './Board'\r\nimport '../scss/styles.scss'\r\n\r\nconst SIZE = 20\r\n\r\nlet INITIAL_BOARD = []\r\nfor (let i = 0; i < SIZE; i++) {\r\n  INITIAL_BOARD.push([])\r\n  for (let j = 0; j < SIZE; j++) {\r\n    INITIAL_BOARD[i].push({ alive: false })\r\n  }\r\n}\r\n\r\nexport default function App() {\r\n  const [board, setBoard] = useState(INITIAL_BOARD)\r\n  const [int, setInt] = useState()\r\n  const [speed, setSpeed] = useState(250)\r\n  const speedRef = useRef()\r\n\r\n  function handleStartStop() {\r\n    if (int) {\r\n      clearInterval(int)\r\n      return setInt(null)\r\n    }\r\n    setInt(\r\n      setInterval(() => {\r\n        setBoard(updateBoard(board))\r\n      }, speed)\r\n    )\r\n  }\r\n\r\n  useEffect(() => {\r\n    let count = 0\r\n    board.forEach((row) => {\r\n      row.forEach((element) => {\r\n        if (element.alive) {\r\n          count++\r\n        }\r\n      })\r\n    })\r\n\r\n    if (count === 0) {\r\n      clearInterval(int)\r\n      return setInt(null)\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [board])\r\n\r\n  function handleSpeedChange() {\r\n    setSpeed(speedRef.current.value)\r\n    clearInterval(int)\r\n    setInt(\r\n      setInterval(() => {\r\n        setBoard(updateBoard(board))\r\n      }, speed)\r\n    )\r\n  }\r\n\r\n  const handleClear = () => {\r\n    handleStartStop()\r\n\r\n    setBoard((prevBoard) => {\r\n      return prevBoard.map((row) => {\r\n        return row.map((element) => {\r\n          return { ...element, alive: false }\r\n        })\r\n      })\r\n    })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className='slider-cont'>\r\n        <label htmlFor='speed'>Speed: {speed}</label>\r\n        <input\r\n          type='range'\r\n          value={speed}\r\n          min='50'\r\n          max='1000'\r\n          onChange={handleSpeedChange}\r\n          ref={speedRef}\r\n        />\r\n      </div>\r\n      <Board board={board} setBoard={setBoard} />\r\n      <button onClick={handleStartStop}>{int ? 'Stop' : 'Start'}</button>\r\n      <button onClick={handleClear}>Clear</button>\r\n    </>\r\n  )\r\n}\r\n\r\nfunction exists(i, j) {\r\n  return i < SIZE && i >= 0 && j < SIZE && j >= 0\r\n}\r\n\r\nfunction checkNeighbours(board, i, j) {\r\n  const neighbours = [\r\n    [1, -1],\r\n    [1, 0],\r\n    [1, 1],\r\n    [0, -1],\r\n    [0, 1],\r\n    [-1, -1],\r\n    [-1, 0],\r\n    [-1, 1],\r\n  ]\r\n\r\n  let count = 0\r\n\r\n  neighbours.forEach((n) => {\r\n    let newI = i + n[0]\r\n    let newJ = j + n[1]\r\n    if (exists(newI, newJ) && board[newI][newJ].alive) {\r\n      count++\r\n    }\r\n  })\r\n\r\n  return count\r\n}\r\n\r\nfunction updateBoard(board) {\r\n  const newBoard = [...board]\r\n  board.forEach((row, rowIdx) => {\r\n    row.forEach((element, colIdx) => {\r\n      const aliveNeighbours = checkNeighbours(board, rowIdx, colIdx)\r\n      if (element.alive && aliveNeighbours > 3) {\r\n        newBoard[rowIdx][colIdx].alive = false\r\n      }\r\n      if (!element.alive && aliveNeighbours === 3) {\r\n        newBoard[rowIdx][colIdx].alive = true\r\n      }\r\n      if (element.alive && aliveNeighbours < 2) {\r\n        newBoard[rowIdx][colIdx].alive = false\r\n      }\r\n    })\r\n  })\r\n\r\n  return newBoard\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport App from './components/App'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.querySelector('#root')\r\n)\r\n"],"sourceRoot":""}